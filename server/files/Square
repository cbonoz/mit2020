
pragma solidity ^0.4.21;

import "./EIP20Interface.sol";


contract Square is EIP20Interface {

    uint256 constant private MAX_UINT256 = 2**256 - 1;
    mapping (address => uint256) public balances;
    mapping (address => mapping (address => uint256)) public allowed;

    string public name; // Token name: eg Simon Bucks
    uint8 public decimals; //How many decimals to show.
    string public symbol; //An identifier for the token: eg SBX
	uint8 public height; // User provided variable (to add to constructor)
	uint8 public width; // User provided variable (to add to constructor)
	string public style; // User provided variable (to add to constructor)

    function Square(
        string _tokenName,
        uint8 _decimalUnits,
        string _tokenSymbol
    ) public {
        balances[msg.sender] = 700; // Give the creator all initial tokens
        totalSupply = 700; // Update total supply
        name = "Square"; // Set the name for display purposes
        decimals = _decimalUnits; // Amount of decimals for display purposes
        symbol = "CB"; // Set the symbol for display purposes
		height = 800;
		width = 400;
		style = "rectangle";
    }

    
    function cost(uint8 price) public returns (uint8 total) {
        // TODO
         
		return total;
    }
    

    function cost(uint8 price) public returns (uint8 total) {
        // TODO
         
		return total;
    }
    

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        uint256 allowance = allowed[_from][msg.sender];
        require(balances[_from] >= _value && allowance >= _value);
        balances[_to] += _value;
        balances[_from] -= _value;
        if (allowance < MAX_UINT256) {
            allowed[_from][msg.sender] -= _value;
        }
        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}

